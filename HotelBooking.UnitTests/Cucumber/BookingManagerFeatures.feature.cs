// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HotelBooking.UnitTests.Cucumber
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BookingCreationFeature : object, Xunit.IClassFixture<BookingCreationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Cucumber", "Booking Creation", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BookingManagerFeatures.feature"
#line hidden
        
        public BookingCreationFeature(BookingCreationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC1 - Valid Booking")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC1 - Valid Booking")]
        public async System.Threading.Tasks.Task TC1_ValidBooking()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC1 - Valid Booking", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
    await testRunner.GivenAsync("the booking start date is \"2025-04-01\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
    await testRunner.AndAsync("the booking end date is \"2025-04-03\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 7
    await testRunner.AndAsync("a room is available for the specified dates", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
    await testRunner.WhenAsync("the user creates the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
    await testRunner.ThenAsync("the booking should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC2 - No Room Available")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC2 - No Room Available")]
        public async System.Threading.Tasks.Task TC2_NoRoomAvailable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC2 - No Room Available", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 13
    await testRunner.GivenAsync("the booking start date is \"2025-04-02\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 14
    await testRunner.AndAsync("the booking end date is \"2025-04-05\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.AndAsync("no room is available for the specified dates", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.WhenAsync("the user tries to create the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
    await testRunner.ThenAsync("the booking should not be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC3 - StartDate in Past")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC3 - StartDate in Past")]
        public async System.Threading.Tasks.Task TC3_StartDateInPast()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC3 - StartDate in Past", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
    await testRunner.GivenAsync("the booking start date is \"2025-03-29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
    await testRunner.AndAsync("the booking end date is \"2025-04-03\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
    await testRunner.WhenAsync("the user tries to create the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
    await testRunner.ThenAsync("the booking should throw an ArgumentException", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC4 - EndDate before StartDate")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC4 - EndDate before StartDate")]
        public async System.Threading.Tasks.Task TC4_EndDateBeforeStartDate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC4 - EndDate before StartDate", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 28
    await testRunner.GivenAsync("the booking start date is \"2025-04-05\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
    await testRunner.AndAsync("the booking end date is \"2025-04-02\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
    await testRunner.WhenAsync("the user tries to create the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
    await testRunner.ThenAsync("the booking should throw an ArgumentException", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC5 - Booking Object Null")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC5 - Booking Object Null")]
        public async System.Threading.Tasks.Task TC5_BookingObjectNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC5 - Booking Object Null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
    await testRunner.GivenAsync("the booking object is null", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
    await testRunner.WhenAsync("the user tries to create the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
    await testRunner.ThenAsync("the booking should throw a NullReferenceException", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC6 - Earliest Valid Booking")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC6 - Earliest Valid Booking")]
        public async System.Threading.Tasks.Task TC6_EarliestValidBooking()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC6 - Earliest Valid Booking", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
    await testRunner.GivenAsync("the booking start date is \"2025-04-01\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
    await testRunner.AndAsync("the booking end date is \"2025-04-02\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
    await testRunner.AndAsync("a room is available for the specified dates", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
    await testRunner.WhenAsync("the user creates the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
    await testRunner.ThenAsync("the booking should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC7 - Latest Valid Booking")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC7 - Latest Valid Booking")]
        public async System.Threading.Tasks.Task TC7_LatestValidBooking()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC7 - Latest Valid Booking", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 49
    await testRunner.GivenAsync("the booking start date is \"2026-04-01\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 50
    await testRunner.AndAsync("the booking end date is \"2026-04-02\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
    await testRunner.AndAsync("a room is available for the specified dates", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
    await testRunner.WhenAsync("the user creates the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
    await testRunner.ThenAsync("the booking should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC8 - StartDate = Today, Invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC8 - StartDate = Today, Invalid")]
        public async System.Threading.Tasks.Task TC8_StartDateTodayInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC8 - StartDate = Today, Invalid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 57
    await testRunner.GivenAsync("the booking start date is \"2025-03-30\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 58
    await testRunner.AndAsync("the booking end date is \"2025-04-02\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
    await testRunner.WhenAsync("the user tries to create the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
    await testRunner.ThenAsync("the booking should throw an ArgumentException", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC9 - EndDate = StartDate, Invalid")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC9 - EndDate = StartDate, Invalid")]
        public async System.Threading.Tasks.Task TC9_EndDateStartDateInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC9 - EndDate = StartDate, Invalid", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 64
    await testRunner.GivenAsync("the booking start date is \"2025-04-05\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 65
    await testRunner.AndAsync("the booking end date is \"2025-04-05\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
    await testRunner.WhenAsync("the user tries to create the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
    await testRunner.ThenAsync("the booking should throw an ArgumentException", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="TC10 - Only One Room Available")]
        [Xunit.TraitAttribute("FeatureTitle", "Booking Creation")]
        [Xunit.TraitAttribute("Description", "TC10 - Only One Room Available")]
        public async System.Threading.Tasks.Task TC10_OnlyOneRoomAvailable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("TC10 - Only One Room Available", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 71
    await testRunner.GivenAsync("the booking start date is \"2025-04-02\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 72
    await testRunner.AndAsync("the booking end date is \"2025-04-04\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
    await testRunner.AndAsync("only 1 room is available for the specified dates", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
    await testRunner.WhenAsync("the user creates the booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
    await testRunner.ThenAsync("the booking should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await BookingCreationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await BookingCreationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
